<?php

namespace App\Tests\Services;

use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Symfony\Component\Console\Tester\CommandTester;
use Symfony\Component\HttpKernel\KernelInterface;

class FileConverterCommandTest extends KernelTestCase
{
    protected CommandTester $commandTester;

    protected KernelInterface $kernelObj;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->kernelObj = static::createKernel();

        $application = new Application($this->kernelObj);

        $command = $application->find('file-converter');

        $this->commandTester = new CommandTester($command);
    }

    /** @test */
    public function convert_local_file()
    {
        $params = [
            'file' => __DIR__ . '/../Data/coffee_feed_trimmed.xml',
        ];

        $this->commandTester->execute($params);

        $output = $this->commandTester->getDisplay();

        $this->assertStringContainsString('Range: Sheet1!A1:R13,  Updated Cells: 234', $output);
    }

    /** @test * */
    public function convert_remote_file()
    {
        $params = [
            'file' => 'ftp://pupDev:pupDev2018@transport.productsup.io/coffee_feed_trimmed.xml',
            'remote' => 'remote',
        ];

        $this->commandTester->execute($params);

        $output = $this->commandTester->getDisplay();

        $this->assertStringContainsString('Range: Sheet1!A1:R13,  Updated Cells: 234', $output);
    }

    /** @test * */
    public function return_error_when_file_is_not_found_local()
    {
        $params = [
            'file' => __DIR__ . '/../Data/coffee_feed_not_found.xml',
        ];

        $this->commandTester->execute($params);

        $output = $this->commandTester->getDisplay();

        $this->assertStringContainsString('Error: File not found at the given path: ', $output);
    }

    /** @test * */
    public function return_error_when_file_is_not_found_remote()
    {
        $params = [
            'file' => 'ftp://pupDev:pupDev2018@transport.productsup.io/coffee_feed_b.xml',
            'remote' => 'remote',
        ];

        $this->commandTester->execute($params);

        $output = $this->commandTester->getDisplay();

        $this->assertStringContainsString('Error: File not found at the given path:', $output);
    }

    /** @test * */
    public function return_error_when_file_mime_type_is_not_supported()
    {
        $params = [
            'file' => __DIR__ . '/../Data/coffee_feed_bad.xml',
        ];

        $this->commandTester->execute($params);

        $output = $this->commandTester->getDisplay();

        $this->assertStringContainsString('Error: The mime type  of the given file is \'plain\' and is not yet supported.', $output);
    }

    /** @test * */
    public function return_error_when_destination_is_not_supported()
    {
        $params = [
            'file' => __DIR__ . '/../Data/coffee_feed_trimmed.xml',
            'destination' => 'not_supported'
        ];

        $this->commandTester->execute($params);

        $output = $this->commandTester->getDisplay();

        $this->assertStringContainsString('Error: The given sheet type \'not_supported\' is not supported.', $output);
    }
}